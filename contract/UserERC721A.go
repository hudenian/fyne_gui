// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package userERC721A

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// UserERC721AMetaData contains all meta data concerning the UserERC721A contract.
var UserERC721AMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userProfit\",\"type\":\"uint256\"}],\"name\":\"BalanceTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"BuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beginTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beginTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"}],\"name\":\"MintWithSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_PUBLIC_MINTING_OPEN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"changeBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buyBackEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_buyBackPrice\",\"type\":\"uint256\"}],\"name\":\"changeBuyBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee_\",\"type\":\"uint256\"}],\"name\":\"changeMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintLimit_\",\"type\":\"uint256\"}],\"name\":\"changeMintLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"placeholderImage_\",\"type\":\"string\"}],\"name\":\"changePlaceholderImage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMintsUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mintFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"whiteListSignerAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBasis_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"placeholderImage_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"shareAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"splitBasis_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"publicMintEnabled_\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"isTokenAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBaseUri\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isFree\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"customFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"channel\",\"type\":\"string\"}],\"name\":\"mintWithSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentlyLockBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeholderImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePublicMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20ContractAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateReserveAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461044a57806306fdde03146104415780630754796b14610438578063081812fc1461042f578063095ea7b3146104265780630d662a1f1461041d57806313966db51461041457806318160ddd1461040b5780631be5cfff1461040257806323b872dd146103f957806329f61b08146103f05780632a55205a146103e7578063312767ca146103de57806334259b5c146103d557806342842e0e146103cc57806342966c68146103c3578063448d8c5c146103ba578063492d306b146103b15780634c261247146103a857806354fd4d501461039f57806355234ec01461039657806356a6d9ef1461038d5780635729083a146103845780636053a0e31461037b57806363331301146102f45780636352211e146103725780636b8a21fc146103695780636c2d27b514610360578063702cbbae1461035757806370a082311461034e578063715018a614610345578063729ad39e1461033c57806377097fc81461033357806379a9fa1c1461032a5780638ba4cc3c146103215780638da5cb5b1461031857806395d89b411461030f578063a22cb46514610306578063b88d4fde146102fd578063bd214423146102f4578063c6ec6909146102eb578063c87b56dd146102e2578063cd3293de146102d9578063e1cd3436146102d0578063e23000a0146102c7578063e2d76cff146102be578063e829f524146102b5578063e8a3d485146102ac578063e929d669146102a3578063e985e9c51461029a578063ecbb090514610291578063f2aff6ec14610288578063f2fde38b1461027f5763f516a2e60361000e5761027a612077565b61000e565b5061027a611fe5565b5061027a611f56565b5061027a611f2d565b5061027a611ed0565b5061027a611eae565b5061027a611ca9565b5061027a611bd3565b5061027a611b90565b5061027a611b71565b5061027a611abc565b5061027a611a9d565b5061027a611a7d565b5061027a611a5e565b5061027a611350565b5061027a611989565b5061027a6118a8565b5061027a6117b4565b5061027a61178a565b5061027a611745565b5061027a611678565b5061027a611549565b5061027a6114f3565b5061027a611491565b5061027a611435565b5061027a61140d565b5061027a6113ee565b5061027a6113be565b5061027a61138e565b5061027a61132c565b5061027a6112a0565b5061027a611120565b5061027a611101565b5061027a61109c565b5061027a610fa7565b5061027a610e9f565b5061027a610d32565b5061027a610a5a565b5061027a610a47565b5061027a610a25565b5061027a610a01565b5061027a6109c2565b5061027a610848565b5061027a610835565b5061027a6107e5565b5061027a610795565b5061027a610776565b5061027a610757565b5061027a610673565b5061027a6105e3565b5061027a6105b9565b5061027a610584565b5061027a61046a565b6001600160e01b031981160361046557565b600080fd5b503461046557602036600319011261046557602060043561048a81610453565b63ffffffff60e01b1663184371e560e31b81149081156104fa575b81156104b7575b506040519015158152f35b6301ffc9a760e01b8114915081156104e9575b81156104d8575b50386104ac565b635b5e139f60e01b149050386104d1565b6380ac58cd60e01b811491506104ca565b63152a902d60e11b811491506104a5565b600091031261046557565b918091926000905b82821061053657501161052f575050565b6000910152565b9150806020918301518186015201829161051e565b9060209161056481518092818552858086019101610516565b601f01601f1916010190565b90602061058192818152019061054b565b90565b5034610465576000366003190112610465576105b56105a1610b3f565b60405191829160208352602083019061054b565b0390f35b5034610465576000366003190112610465576065546040516001600160a01b039091168152602090f35b50346104655760203660031901126104655760043561060181614001565b15610633576000526000805160206148c8833981519152602052602060018060a01b0360406000205416604051908152f35b6040516333d1c03960e21b8152600490fd5b6001600160a01b0381160361046557565b60a4359061066382610645565b565b610124359061066382610645565b5060403660031901126104655760043561068c81610645565b6daaeb6d7670e522a718067333cd4e803b6106ae575b61001960243583613f10565b604051633185c44d60e21b81523060048201526001600160a01b038316602482015290602090829060449082905afa90811561074a575b60009161071c575b50156106f957386106a2565b604051633b79c77360e21b81526001600160a01b03919091166004820152602490fd5b61073d915060203d8111610743575b6107358183610b1e565b810190613481565b386106ed565b503d61072b565b610752612fde565b6106e5565b5034610465576000366003190112610465576020606f54604051908152f35b5034610465576000366003190112610465576020606854604051908152f35b5034610465576000366003190112610465576020600080516020614868833981519152547f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c41549003604051908152f35b503461046557600036600319011261046557602060ff606954166040519015158152f35b60609060031901126104655760043561082181610645565b9060243561082e81610645565b9060443590565b5061001961084236610809565b91613aa2565b5034610465576060366003190112610465576108d0602060043561086b81610645565b6024359061087882610645565b60443591610884612096565b82606654801515806109ae575b61090e575b505060405163a9059cbb60e01b81526001600160a01b03909116600482015260248101929092529092839190829060009082906044820190565b03926001600160a01b03165af18015610901575b6108ea57005b6100199060203d8111610743576107358183610b1e565b610909612fde565b6108e4565b81945061092d61092687926127106109629504612a97565b8096612b47565b60655460405163a9059cbb60e01b81526001600160a01b03909116600482015260248101969096529491829081906044820190565b038160006001600160a01b0388165af180156109a1575b610984575b80610896565b61099a90853d8111610743576107358183610b1e565b503861097e565b6109a9612fde565b610979565b506065546001600160a01b03161515610891565b5034610465576040366003190112610465576105b56127106109e8606e54602435612a97565b6040805130815292909104602083015290918291820190565b503461046557600036600319011261046557602060ff607154166040519015158152f35b503461046557602036600319011261046557610a3f612096565b600435606d55005b50610019610a5436610809565b91613b59565b503461046557602036600319011261046557610019600435614602565b90600182811c92168015610aa7575b6020831014610a9157565b634e487b7160e01b600052602260045260246000fd5b91607f1691610a86565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b038111610adb57604052565b610ae3610ab1565b604052565b606081019081106001600160401b03821117610adb57604052565b602081019081106001600160401b03821117610adb57604052565b90601f801991011681019081106001600160401b03821117610adb57604052565b60405190600082600080516020614908833981519152918254610b6181610a77565b80845293600191808316908115610be75750600114610b89575b505061066392500383610b1e565b600090815291507f933ecf8acb7824b680a8d16f3ff3db8864228d986aa4c2ebab1eeb2703b4beb35b848310610bcc575061066393505081016020013880610b7b565b81935090816020925483858a01015201910190918592610bb2565b9550505050505060ff1916602083015261066382604081013880610b7b565b6040519060008260675491610c1a83610a77565b80835292600190818116908115610c8e5750600114610c41575b5061066392500383610b1e565b6067600090815291506000805160206148e88339815191525b848310610c735750610663935050810160200138610c34565b81935090816020925483858a01015201910190918592610c5a565b94505050505060ff19166020830152610663826040810138610c34565b6040519060008260705491610cbf83610a77565b80835292600190818116908115610c8e5750600114610ce5575061066392500383610b1e565b6070600090815291506000805160206148888339815191525b848310610d175750610663935050810160200138610c34565b81935090816020925483858a01015201910190918592610cfe565b503461046557600080600319360112610df6576040519080607054610d5681610a77565b80855291600191808316908115610dd55750600114610d8c575b6105b585610d8081870382610b1e565b60405191829182610570565b9250607083526000805160206148888339815191525b828410610dbd575050508101602001610d80826105b5610d70565b80546020858701810191909152909301928101610da2565b60ff191660208701525050604084019250610d8091508390506105b5610d70565b80fd5b6020906001600160401b038111610e16575b601f01601f19160190565b610e1e610ab1565b610e0b565b929192610e2f82610df9565b91610e3d6040519384610b1e565b829481845281830111610465578281602093846000960137010152565b9080601f830112156104655781602061058193359101610e23565b602060031982011261046557600435906001600160401b0382116104655761058191600401610e5a565b503461046557610eae36610e75565b610eb6612096565b610ec560ff6071541615613a46565b80516001600160401b038111610f9a575b610eea81610ee5606754610a77565b612381565b602080601f8311600114610f2557508192600092610f1a575b50508160011b916000199060031b1c191617606755005b015190503880610f03565b90601f19831693610f4660676000526000805160206148e883398151915290565b926000905b868210610f825750508360019510610f69575b505050811b01606755005b015160001960f88460031b161c19169055388080610f5e565b80600185968294968601518155019501930190610f4b565b610fa2610ab1565b610ed6565b503461046557610fb636610e75565b610fbe612096565b610fd1610fcc607054610a77565b6123d0565b6000607055610fe560ff6071541615613a46565b80516001600160401b03811161108f575b61100581610ee5606754610a77565b602080601f831160011461103457508192600092610f1a5750508160011b916000199060031b1c191617606755005b90601f1983169361105560676000526000805160206148e883398151915290565b926000905b8682106110775750508360019510610f6957505050811b01606755005b8060018596829496860151815501950193019061105a565b611097610ab1565b610ff6565b5034610465576000366003190112610465576105b5604051604081018181106001600160401b038211176110f4575b60405260058152640312e302e360dc1b602082015260405191829160208352602083019061054b565b6110fc610ab1565b6110cb565b5034610465576000366003190112610465576020606a54604051908152f35b50346104655760403660031901126104655760043561113e81610645565b6024359061114a612096565b61115682471015613435565b6000826066548015158061128c575b6111f9575b506001600160a01b03909216917fd9ea4ea293bcae114b3182a0fe971d66dba10eef3d3eef2a088eb54103dcda65916000828581156111ef575b600092839283928392f1156111e2575b6111c86111c383606f5461326e565b606f55565b60408051918252602082019290925290819081015b0390a3005b6111ea612fde565b6111b4565b6108fc92506111a4565b7fd9ea4ea293bcae114b3182a0fe971d66dba10eef3d3eef2a088eb54103dcda65925061122b91506127108504612a97565b916112368385612b47565b9060008080808761126061125461125460655460018060a01b031690565b6001600160a01b031690565b828215611283575bf115611276575b929161116a565b61127e612fde565b61126f565b506108fc611268565b506065546001600160a01b03161515611165565b5034610465576020366003190112610465576004356112bd612096565b606a5481116112cb57607255005b60405162461bcd60e51b815260206004820152603360248201527f5265736572766520616d6f756e74206d757374206265206c657373207468616e6044820152722072656d61696e696e67207175616e7469747960681b6064820152608490fd5b503461046557600036600319011261046557602060ff607454166040519015158152f35b50346104655760203660031901126104655760043561136e81610645565b60018060a01b0316600052606b6020526020604060002054604051908152f35b50346104655760203660031901126104655760206001600160a01b036113b5600435613e91565b16604051908152f35b5034610465576000366003190112610465576113d8612096565b6069805460ff808216151660ff19909116179055005b5034610465576000366003190112610465576020606654604051908152f35b503461046557602036600319011261046557602061142c600435614001565b15604051908152f35b50346104655760203660031901126104655760043561145381610645565b6001600160a01b0381161561147f576001600160401b036114756020926119ec565b5416604051908152f35b6040516323d3ad8160e21b8152600490fd5b503461046557600080600319360112610df6576114ac612096565b603380546001600160a01b031981169091556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5034610465576020366003190112610465576004356001600160401b038082116104655736602383011215610465578160040135908111610465573660248260051b8401011161046557602461001992016130be565b506040366003190112610465576004356024356001600160401b03811161046557611578903690600401610e5a565b6115838215156129ba565b600160ff60695416151503611617577fcd0e00beb8e6d5ab96ee16e6a1a735ff07cae8702f2e48feb32fefe40f25692c906115ca6115c384606854612a97565b3414612ab6565b6116016000805160206148688339815191526115fb8154956115ec81336132dc565b6115f5816133de565b336144c3565b54612b0e565b611612604051928392339684612b5e565b0390a2005b60405162461bcd60e51b815260206004820152603360248201527f5075626c6963206d696e74696e67206973206e6f7420656e61626c656420666f6044820152721c881d1a1a5cc818dbdb9d1c9858dd081e595d606a1b6064820152608490fd5b5034610465576020366003190112610465576004356116a6600161169e60745460ff1690565b151514613496565b6116c86116b861125461125484613e91565b6001600160a01b031633146134f8565b6116d6476073541115613534565b6116df81614602565b600080808060735481811561173c575b3390f11561172f575b60735460405190815233907f79650a26d9c122dcabbd86157b7bdabd291e5058cef11fc21c572518a1690ee69080602081016111dd565b611737612fde565b6116f8565b506108fc6116ef565b50346104655760403660031901126104655761001960043561176681610645565b60243590611772612096565b61177b826133de565b61178582826144c3565b6132dc565b5034610465576000366003190112610465576033546040516001600160a01b039091168152602090f35b503461046557600080600319360112610df65760405190806000805160206148a8833981519152908154906117e882610a77565b8086529260019280841690811561186c5750600114611812575b6105b586610d8081880382610b1e565b815292507f617167b76dcc8247761fd21f427ad8ec3be6b3be203aed34e3aac08b4d31817c5b828410611854575050508101602001610d80826105b538611802565b80546020858701810191909152909301928101611838565b60ff191660208801525050604085019350610d8092508491506105b5905038611802565b8015150361046557565b610164359061066382611890565b5034610465576040366003190112610465576004356118c681610645565b6024356118d281611890565b6daaeb6d7670e522a718067333cd4e803b6118f2575b5061001991613fac565b604051633185c44d60e21b81523060048201526001600160a01b038416602482015290602090829060449082905afa90811561197c575b60009161195e575b501561193d57386118e8565b604051633b79c77360e21b81526001600160a01b0383166004820152602490fd5b611976915060203d8111610743576107358183610b1e565b38611931565b611984612fde565b611929565b506080366003190112610465576004356119a281610645565b6024356119ae81610645565b606435916001600160401b0383116104655736602384011215610465576119e2610019933690602481600401359101610e23565b9160443591613bf8565b6001600160a01b031660009081527f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c456020526040902090565b6001600160a01b031660009081527f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c476020526040902090565b5034610465576000366003190112610465576020606e54604051908152f35b5034610465576020366003190112610465576105b56105a1600435613976565b5034610465576000366003190112610465576020607254604051908152f35b503461046557610180366003190112610465576001600160401b0360043581811161046557611aef903690600401610e5a565b60243582811161046557611b07903690600401610e5a565b60443583811161046557611b1f903690600401610e5a565b611b27610656565b926101043594851161046557611b44610019953690600401610e5a565b90611b4d610665565b92611b5661189a565b95610144359560e4359360c435936084359260643592612139565b5034610465576000366003190112610465576020607354604051908152f35b503461046557604036600319011261046557600435611bae81611890565b611bb6612096565b60ff80196074541691151516176074556024356073556000604051f35b503461046557611be236610e75565b611bea612096565b611bf5607054610a77565b15611c5957805115611c0a576100199061251c565b60405162461bcd60e51b815260206004820152602160248201527f506c616365686f6c64657220696d6167652063616e6e6f7420626520656d70746044820152607960f81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602260248201527f4d657461646174612068617320616c7265616479206265656e2072657665616c604482015261195960f21b6064820152608490fd5b503461046557600080600319360112610df657611cc4610b3f565b611ccf606e546135f5565b91611cd861388a565b90805b60148110611dee57506105b5611de2610d80611d31611dad87611d94611d8689611d2b611d78611d5a8f611d2b6040519a8b99611d2b60208c01600990683d913730b6b2911d1160b91b81520190565b9061357f565b7f222c2273656c6c65725f6665655f62617369735f706f696e7473223a000000008152601c0190565b7116113332b2afb932b1b4b834b2b73a111d1160711b815260120190565b61060f60f31b815260020190565b61227d60f01b815260020190565b0391611da8601f1993848101835282610b1e565b613797565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006020820152938491603d8301611d2b565b03908101835282610b1e565b80611e85611e3c611e36611e26611e20611e1a611e15611e10611ea999612b2b565b612a28565b6138a5565b30613415565b60ff1690565b60f81b6001600160f81b03191690565b60f81c90565b611e69611e5a611e26611e54600f8560041c166138c0565b846138e7565b9160f41b600f60f81b16613918565b611e7f611e7585612a4d565b91871a91886138f9565b53613918565b611ea3611e99611e9484612a4d565b61323e565b91851a91866138f9565b536131ed565b611cdb565b503461046557602036600319011261046557611ec8612096565b600435606855005b503461046557604036600319011261046557602060ff611f21600435611ef581610645565b611f0a60243591611f0583610645565b611a25565b9060018060a01b0316600052602052604060002090565b54166040519015158152f35b503461046557600036600319011261046557611f47612096565b6071805460ff19166001179055005b5060e036600319011261046557600435611f6f81611890565b60243590611f7c82610645565b60a435906001600160401b03928383116104655736602384011215610465578260040135918483116104655736602484860101116104655760c435948511610465576024611fd1610019963690600401610e5a565b940191608435916064359160443591612caa565b50346104655760203660031901126104655760043561200381610645565b61200b612096565b6001600160a01b0381161561202357610019906120ee565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5034610465576000366003190112610465576020606d54604051908152f35b6033546001600160a01b031633036120aa57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6033549060018060a01b0380911691826001600160601b0360a01b821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b9a98969492909997959391600080516020614948833981519152549a60ff8c60081c169b8c60001461222b5750303b155b156121c05761217f9b159c8d61219f57612234565b61218557565b600080516020614948833981519152805461ff0019169055565b600080516020614948833981519152805461ffff1916610101179055612234565b60405162461bcd60e51b815260206004820152603760248201527f455243373231415f5f496e697469616c697a61626c653a20636f6e747261637460448201527f20697320616c726561647920696e697469616c697a65640000000000000000006064820152608490fd5b60ff161561216a565b99979593919a98969492909a6000549b60ff8d60081c1615809d819e61235c575b811561233c575b50156122e0576122829b8d612279600160ff196000541617600055565b6122c7576127f4565b61228857565b61229861ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1565b6122db61010061ff00196000541617600055565b6127f4565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b303b1591508161234e575b503861225c565b6001915060ff161438612347565b600160ff8216109150612255565b818110612375575050565b6000815560010161236a565b90601f821161238e575050565b6106639160676000526000805160206148e8833981519152906020601f840160051c830193106123c6575b601f0160051c019061236a565b90915081906123b9565b601f81116123db5750565b600060708152601f600080516020614888833981519152920160051c8201915b82811061240757505050565b8181556001016123fb565b90601f821161241f575050565b610663916000805160206149088339815191526000527f933ecf8acb7824b680a8d16f3ff3db8864228d986aa4c2ebab1eeb2703b4beb3906020601f840160051c830193106123c657601f0160051c019061236a565b90601f8211612482575050565b610663916070600052600080516020614888833981519152906020601f840160051c830193106123c657601f0160051c019061236a565b90601f82116124c6575050565b610663916000805160206148a88339815191526000527f617167b76dcc8247761fd21f427ad8ec3be6b3be203aed34e3aac08b4d31817c906020601f840160051c830193106123c657601f0160051c019061236a565b9081516001600160401b0381116125f4575b6125428161253d607054610a77565b612475565b602080601f831160011461257e5750819293600092612573575b50508160011b916000199060031b1c191617607055565b01519050388061255c565b90601f1983169461259f607060005260008051602061488883398151915290565b926000905b8782106125dc5750508360019596106125c3575b505050811b01607055565b015160001960f88460031b161c191690553880806125b8565b806001859682949686015181550195019301906125a4565b6125fc610ab1565b61252e565b9081516001600160401b0381116126d4575b61262281610ee5606754610a77565b602080601f831160011461265e5750819293600092612653575b50508160011b916000199060031b1c191617606755565b01519050388061263c565b90601f1983169461267f60676000526000805160206148e883398151915290565b926000905b8782106126bc5750508360019596106126a3575b505050811b01606755565b015160001960f88460031b161c19169055388080612698565b80600185968294968601518155019501930190612684565b6126dc610ab1565b612613565b9081516001600160401b0381116127e7575b6000805160206148a883398151915290612716816127118454610a77565b6124b9565b602080601f8311600114612752575081929394600092612747575b50508160011b916000199060031b1c1916179055565b015190503880612731565b90601f198316956127926000805160206148a88339815191526000527f617167b76dcc8247761fd21f427ad8ec3be6b3be203aed34e3aac08b4d31817c90565b926000905b8882106127cf575050836001959697106127b6575b505050811b019055565b015160001960f88460031b161c191690553880806127ac565b80600185968294968601518155019501930190612797565b6127ef610ab1565b6126f3565b9a939a88516128b8575b9461286a6106639c61285c6128969a9761284a61288c986128b39f9e9c98612845906128306128879a6128919f613d01565b612838612997565b612840614768565b612601565b606855565b60ff8019606954169115151617606955565b612865326120ee565b606a55565b60018060a01b03166001600160601b0360a01b606c541617606c55565b606d55565b606e55565b61251c565b60018060a01b03166001600160601b0360a01b6065541617606555565b606655565b92909a9897959196939487516128d757949396919597989a90926127fe565b60405162461bcd60e51b815260206004820152603260248201527f506c616365686f6c646572496d6167655f206e6f7420656d70747920736f20626044820152716173655552495f206d75737420656d70747960701b6064820152608490fd5b1561293e57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6129b160ff60005460081c166129ac81612937565b612937565b610663336120ee565b156129c157565b60405162461bcd60e51b815260206004820152602260248201527f5175616e74697479206d7573742062652067726561746572207468616e207a65604482015261726f60f01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b6001600160fd1b038111600116612a40575b60031b90565b612a48612a11565b612a3a565b6001600160ff1b038111600116612a65575b60011b90565b612a6d612a11565b612a5f565b6001600160fe1b038111600116612a8a575b60021b90565b612a92612a11565b612a84565b8060001904821181151516612aaa570290565b612ab2612a11565b0290565b15612abd57565b60405162461bcd60e51b8152602060048201526024808201527f4c41542073656e7420646f6573206e6f74206d6174636820746865206d696e746044820152632066656560e01b6064820152608490fd5b60018110612b1e575b6000190190565b612b26612a11565b612b17565b80601310612b3a575b60130390565b612b42612a11565b612b34565b818110612b52570390565b612b5a612a11565b0390565b610581939260609282526020820152816040820152019061054b565b15612b8157565b60405162461bcd60e51b815260206004820152603e60248201527f596f7520617265206e6f742061626c6520746f206d696e74206d6f726520746860448201527f616e2074686520616c6c6f6361746564206c696d6974206174206f6e636500006064820152608490fd5b15612bf357565b60405162461bcd60e51b815260206004820152602f60248201527f5075626c6963206d696e74696e6720697320656e61626c656420666f7220746860448201526e1a5cc818dbdb9d1c9858dd081e595d608a1b6064820152608490fd5b15612c5757565b60405162461bcd60e51b815260206004820152602560248201527f546865207369676e61747572652070726f766964656420646f6573206e6f74206044820152640dac2e8c6d60db1b6064820152608490fd5b959694929693909193612cbe8215156129ba565b878211801590612e49575b612cd290612b7a565b60695460ff1615612ce290612bec565b60008051602061486883398151915293838686549a612d02818785613396565b6040518b151560f81b6020820190815260609490941b6bffffffffffffffffffffffff1916602182015260006035820152600160f81b60558201526056810191909152607680820192909252908152612d5c609682610b1e565b519020612d689061307b565b913690612d7492610e23565b612d7d91612e51565b6033547f8496c4890288e3b21ccf98329f0f417d546eda7e748a2589fa6cd44eed265a5597612de6966115fb95938593919291612dd1916001600160a01b0390811691168114908115612e2a575b50612c50565b15612dfc575b50612de1906133de565b6144c3565b612df7604051928392339684612b5e565b0390a2565b80612e1857506115c3612e1191606854612a97565b8138612dd7565b612e25916115c391612a97565b612e11565b606c54909150612e42906001600160a01b0316611254565b1438612dcb565b508715612cc9565b61058191612e5e91612fa6565b919091612e86565b60051115612e7057565b634e487b7160e01b600052602160045260246000fd5b612e8f81612e66565b80612e975750565b612ea081612e66565b60018103612eed5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b612ef681612e66565b60028103612f435760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b80612f4f600392612e66565b14612f5657565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b906041815114600014612fd457612fd0916020820151906060604084015193015160001a90612feb565b9091565b5050600090600290565b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831161306f5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15613062575b81516001600160a01b0381161561305c579190565b50600190565b61306a612fde565b613047565b50505050600090600390565b60405160208101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c81526130b881610ae8565b51902090565b906130c7612096565b60005b8181106130d657505050565b606a549060018281116131a85760725480841061319b575b8303106131485761310461286561314393612b0e565b613121613112828587613220565b3561311c81610645565b614390565b61313e61312f828587613220565b3561313981610645565b61333b565b6131ed565b6130ca565b60405162461bcd60e51b815260206004820152602560248201527f4e6f7420656e6f75676820756e7265736572766564206d696e747320617661696044820152646c61626c6560d81b6064820152608490fd5b6131a3612a11565b6130ee565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f756768206d696e74732072656d61696e696e670000000000006044820152606490fd5b60019060001981146131fd570190565b613205612a11565b0190565b50634e487b7160e01b600052603260045260246000fd5b9190811015613231575b60051b0190565b613239613209565b61322a565b60019060011981116131fd570190565b60029060021981116131fd570190565b60209060201981116131fd570190565b811981116131fd570190565b1561328157565b60405162461bcd60e51b815260206004820152602d60248201527f4d696e74206c696d697420666f722074686973206163636f756e74206861732060448201526c1899595b88195e18d959591959609a1b6064820152608490fd5b6001600160a01b03166000818152606b602052604090205490916133219161331c613307838361326e565b606d5480911190811591613332575b5061327a565b61326e565b90600052606b602052604060002055565b90501538613316565b6001600160a01b03166000818152606b60205260409020546001906001198111613389575b0190613379606d5480841190811591613332575061327a565b600052606b602052604060002055565b613391612a11565b613360565b6001600160a01b03166000818152606b60205260409020549092613321929190806133c9575061331c613307838361326e565b61331c906133d7848461326e565b111561327a565b606a548082116131a857607254808210613408575b81038211613148576106639161286591612b47565b613410612a11565b6133f3565b811561341f570490565b634e487b7160e01b600052601260045260246000fd5b1561343c57565b60405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f7567682062616c616e636520746f207472616e7366657200006044820152606490fd5b90816020910312610465575161058181611890565b1561349d57565b60405162461bcd60e51b815260206004820152602d60248201527f627579206261636b206973206e6f7420656e61626c656420666f72207468697360448201526c0818dbdb9d1c9858dd081e595d609a1b6064820152608490fd5b156134ff57565b60405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606490fd5b1561353b57565b606460405162461bcd60e51b815260206004820152602060248201527f436f6e7472616374206e6f7420656e6f756768206275794261636b50726963656044820152fd5b9061320560209282815194859201610516565b60405190602082018281106001600160401b038211176135b6575b60405260008252565b6135be610ab1565b6135ad565b906135cd82610df9565b6135da6040519182610b1e565b82815280926135eb601f1991610df9565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101561372a575b506d04ee2d6d415b85acef81000000008083101561371b575b50662386f26fc100008083101561370c575b506305f5e100808310156136fd575b50612710808310156136ee575b5060648210156136de575b600a809210156136d4575b60019081602161368c8287016135c3565b95860101905b61369e575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156136cf57919082613692565b613697565b916001019161367b565b9190606460029104910191613670565b60049193920491019138613665565b60089193920491019138613658565b60109193920491019138613649565b60209193920491019138613637565b60409350810491503861361e565b6040519061374582610ae8565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b805115613881576137a6613738565b6137c26137bd6137b6845161324e565b6003900490565b612a72565b916137d46137cf8461325e565b6135c3565b92835280815182019060208501935b8282106138255750505060039051068060011461381457600214613805575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b90919360049060038094019384516001603f81818460121c16880101519260f893841b8652828282600c1c1689010151841b8387015282828260061c1689010151841b60028701521686010151901b90820152019391906137e3565b50610581613592565b6040519061389782610ae8565b602882526040366020840137565b60019060ff81116138b4571b90565b6138bc612a11565b1b90565b610ff090600f60ff8216116001166138da575b60041b1690565b6138e2612a11565b6138d3565b60ff9182169116818110612b52570390565b90602091805182101561390b57010190565b613913613209565b010190565b60f81c600a81101561394d5760cf8111613940575b60300160f81b6001600160f81b03191690565b613948612a11565b61392d565b60a88111613969575b60570160f81b6001600160f81b03191690565b613971612a11565b613956565b61397f81614001565b156139e95761398c610c06565b90613998607054610a77565b156139a7575050610581610cab565b8151156139df57611d2b916139d16139c1610581936135f5565b604051948593602085019061357f565b03601f198101835282610b1e565b5050610581613592565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e1032bc34b9ba32b73a103a37b5b2b760891b6064820152608490fd5b15613a4d57565b60405162461bcd60e51b815260206004820152602760248201527f4261736520555249206973206c6f636b65642c2069742063616e6e6f742062656044820152660819591a5d195960ca1b6064820152608490fd5b91906daaeb6d7670e522a718067333cd4e803b613ac4575b5061066392614056565b6001600160a01b0384163314613aba57604051633185c44d60e21b815230600482015233602482015290602090829060449082905afa908115613b4c575b600091613b2e575b5015613b165738613aba565b604051633b79c77360e21b8152336004820152602490fd5b613b46915060203d8111610743576107358183610b1e565b38613b0a565b613b54612fde565b613b02565b91906daaeb6d7670e522a718067333cd4e803b613b7b575b50610663926141bd565b6001600160a01b0384163314613b7157604051633185c44d60e21b815230600482015233602482015290602090829060449082905afa908115613beb575b600091613bcd575b5015613b165738613b71565b613be5915060203d8111610743576107358183610b1e565b38613bc1565b613bf3612fde565b613bb9565b9291906daaeb6d7670e522a718067333cd4e803b613c1b575b50610663936141d9565b6001600160a01b0385163314613c1157604051633185c44d60e21b815230600482015233602482015290602090829060449082905afa908115613c8b575b600091613c6d575b5015613b165738613c11565b613c85915060203d8111610743576107358183610b1e565b38613c61565b613c93612fde565b613c59565b15613c9f57565b60405162461bcd60e51b815260206004820152603460248201527f455243373231415f5f496e697469616c697a61626c653a20636f6e7472616374604482015273206973206e6f7420696e697469616c697a696e6760601b6064820152608490fd5b9190613d2a60ff6000805160206149488339815191525460081c16613d2581613c98565b613c98565b82516001600160401b038111613e55575b60008051602061490883398151915290613d5e81613d598454610a77565b612412565b602080601f8311600114613db757508190613d959596600092613dac575b50508160011b916000199060031b1c19161790556126e1565b610663600060008051602061486883398151915255565b015190503880613d7c565b90601f19831696613df76000805160206149088339815191526000527f933ecf8acb7824b680a8d16f3ff3db8864228d986aa4c2ebab1eeb2703b4beb390565b926000905b898210613e3d57505090839291600194613d95989910613e24575b505050811b0190556126e1565b015160001960f88460031b161c19169055388080613e17565b80600185968294968601518155019501930190613dfc565b613e5d610ab1565b613d3b565b6000527f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44602052604060002090565b613e9a81613e62565b5490600160e01b821615613eba57604051636f96cda160e11b8152600490fd5b8115613ec4575090565b905060008051602061486883398151915254811015613efe575b60001901613eeb81613e62565b54908115613ef7575090565b9050613ede565b604051636f96cda160e11b8152600490fd5b6001600160a01b0380613f2284613e91565b1690813303613f85575b836000526000805160206148c88339815191526020526040600020921691826001600160601b0360a01b8254161790557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b60ff613f9433611f0a85611a25565b5416613f2c576040516367d9dca160e11b8152600490fd5b613fb981611f0a33611a25565b9115159160ff1981541660ff841617905560405191825260018060a01b0316907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3565b600080516020614868833981519152548110908161401d575090565b90506000527f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c44602052600160e01b604060002054161590565b9061406083613e91565b6001600160a01b03838116928282168490036141ac5760008681526000805160206148c883398151915260205260409020805490926140b26001600160a01b03881633908114908414171590565b1590565b61417b575b8216958615614169576140e0936140d39261415f575b506119ec565b80546000190190556119ec565b80546001019055600160e11b4260a01b841781176140fd86613e62565b5581161561411e575b506000805160206149288339815191526000604051a4565b6001840161412b81613e62565b5415614138575b50614106565b6000805160206148688339815191525481146141325761415790613e62565b553880614132565b60009055386140cd565b604051633a954ecd60e21b8152600490fd5b6141956140ae61418e33611f0a8b611a25565b5460ff1690565b156140b757604051632ce44b5f60e11b8152600490fd5b60405162a1148160e81b8152600490fd5b909161066392604051926141d084610b03565b60008452613bf8565b9291906141e7828286613aa2565b803b6141f4575b50505050565b6141fd93614367565b1561420b57388080806141ee565b6040516368d2bf6b60e11b8152600490fd5b90816020910312610465575161058181610453565b610581939260809260018060a01b03168252600060208301526040820152816060820152019061054b565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526105819291019061054b565b3d156142b9573d9061429f82610df9565b916142ad6040519384610b1e565b82523d6000602084013e565b606090565b6142e760209160009394604051948580948193630a85bd0160e11b998a84523360048501614232565b03926001600160a01b03165af160009181614337575b506143295761430a61428e565b80519081614324576040516368d2bf6b60e11b8152600490fd5b602001fd5b6001600160e01b0319161490565b61435991925060203d8111614360575b6143518183610b1e565b81019061421d565b90386142fd565b503d614347565b926020916142e7936000604051809681958294630a85bd0160e11b9a8b8552336004860161425d565b604090815161439e81610b03565b6000928382526000805160206148688339815191529182546143bf856119ec565b8054680100000000000000010190556001600160a01b038516904260a01b8217600160e11b176143ee82613e62565b556001918282019160008051602061492883398151915290828a838180a483835b8481036144b457505050156144a45760008051602061486883398151915255843b61443d575b505050505050565b83549460001986019180805b614464575b5050505050505403610df6578080808080614435565b15614497575b8761447c6140ae8684870196866142be565b6144865781614449565b85516368d2bf6b60e11b8152600490fd5b86831061446a578061444e565b8351622e076360e81b8152600490fd5b80848c858180a401849061440f565b906040918251926144d384610b03565b6000938481526000805160206148688339815191529283549085156145f1576144fb816119ec565b80546801000000000000000188020190556001916001600160a01b0382164260a01b84891460e11b17811761452f83613e62565b558884808a850194808560008051602061492883398151915295868180a4015b8481036145e257505050156145d25760008051602061486883398151915255803b61457e575b50505050505050565b84549586039180805b6145a3575b5050505050505403610df657808080808080614575565b156145c5575b876145bb6140ae8684870196866142be565b6144865781614587565b8683106145a9578061458c565b8451622e076360e81b8152600490fd5b80848d858180a401859061454f565b835163b562e8dd60e01b8152600490fd5b61460b81613e91565b60008281526000805160206148c8833981519152602052604090208054916001600160a01b0381169133808514908414171561473e575b600093614735575b50614654826119ec565b80546fffffffffffffffffffffffffffffffff0190554260a01b8217600360e01b1761467f85613e62565b55600160e11b8116156146f4575b5060008051602061492883398151915282604051a46106636146d07f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c415460010190565b7f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c4155565b6001840161470181613e62565b541561470e575b5061468d565b6000805160206148688339815191525481146147085761472d90613e62565b553880614708565b8390553861464a565b6147516140ae61418e33611f0a87611a25565b1561464257604051632ce44b5f60e11b8152600490fd5b600061477e60ff825460081c166129ac81612937565b6daaeb6d7670e522a718067333cd4e90813b614798575050565b60405163c3c5a54760e01b815230600482015260208160248185875af190811561485a575b829161483c575b50156147ce575050565b813b15610df657604051633e9f1edf60e11b8152306004820152733cc6cdda760b79bafa08df41ecfa224f810dceb66024820152918290604490829084905af1801561482f575b61481c5750565b8061482961066392610ac8565b8061050b565b614837612fde565b614815565b614854915060203d8111610743576107358183610b1e565b386147c4565b614862612fde565b6147bd56fe2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c408f6b23ffa15f0465e3176e15ca644cf24f86dc1312fe715484e3c4aead5eb78b2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c432569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c469787eeb91fe3101235e4a76063c7023ecb40f923f97916639c598592fa30d6ae2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c42ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efee151c8401928dc223602bb187aff91b9a56c7cae5476ef1b3287b085a16c85fa26469706673582212201d1168e61a812940871bf14b55ac006f1ef15368c37d05bd8830e7726c35395764736f6c634300080d0033",
}

// UserERC721AABI is the input ABI used to generate the binding from.
// Deprecated: Use UserERC721AMetaData.ABI instead.
var UserERC721AABI = UserERC721AMetaData.ABI

// UserERC721ABin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UserERC721AMetaData.Bin instead.
var UserERC721ABin = UserERC721AMetaData.Bin

// DeployUserERC721A deploys a new Ethereum contract, binding an instance of UserERC721A to it.
func DeployUserERC721A(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UserERC721A, error) {
	parsed, err := UserERC721AMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UserERC721ABin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UserERC721A{UserERC721ACaller: UserERC721ACaller{contract: contract}, UserERC721ATransactor: UserERC721ATransactor{contract: contract}, UserERC721AFilterer: UserERC721AFilterer{contract: contract}}, nil
}

// UserERC721A is an auto generated Go binding around an Ethereum contract.
type UserERC721A struct {
	UserERC721ACaller     // Read-only binding to the contract
	UserERC721ATransactor // Write-only binding to the contract
	UserERC721AFilterer   // Log filterer for contract events
}

// UserERC721ACaller is an auto generated read-only Go binding around an Ethereum contract.
type UserERC721ACaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserERC721ATransactor is an auto generated write-only Go binding around an Ethereum contract.
type UserERC721ATransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserERC721AFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UserERC721AFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UserERC721ASession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UserERC721ASession struct {
	Contract     *UserERC721A      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UserERC721ACallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UserERC721ACallerSession struct {
	Contract *UserERC721ACaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// UserERC721ATransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UserERC721ATransactorSession struct {
	Contract     *UserERC721ATransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// UserERC721ARaw is an auto generated low-level Go binding around an Ethereum contract.
type UserERC721ARaw struct {
	Contract *UserERC721A // Generic contract binding to access the raw methods on
}

// UserERC721ACallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UserERC721ACallerRaw struct {
	Contract *UserERC721ACaller // Generic read-only contract binding to access the raw methods on
}

// UserERC721ATransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UserERC721ATransactorRaw struct {
	Contract *UserERC721ATransactor // Generic write-only contract binding to access the raw methods on
}

// NewUserERC721A creates a new instance of UserERC721A, bound to a specific deployed contract.
func NewUserERC721A(address common.Address, backend bind.ContractBackend) (*UserERC721A, error) {
	contract, err := bindUserERC721A(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UserERC721A{UserERC721ACaller: UserERC721ACaller{contract: contract}, UserERC721ATransactor: UserERC721ATransactor{contract: contract}, UserERC721AFilterer: UserERC721AFilterer{contract: contract}}, nil
}

// NewUserERC721ACaller creates a new read-only instance of UserERC721A, bound to a specific deployed contract.
func NewUserERC721ACaller(address common.Address, caller bind.ContractCaller) (*UserERC721ACaller, error) {
	contract, err := bindUserERC721A(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UserERC721ACaller{contract: contract}, nil
}

// NewUserERC721ATransactor creates a new write-only instance of UserERC721A, bound to a specific deployed contract.
func NewUserERC721ATransactor(address common.Address, transactor bind.ContractTransactor) (*UserERC721ATransactor, error) {
	contract, err := bindUserERC721A(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UserERC721ATransactor{contract: contract}, nil
}

// NewUserERC721AFilterer creates a new log filterer instance of UserERC721A, bound to a specific deployed contract.
func NewUserERC721AFilterer(address common.Address, filterer bind.ContractFilterer) (*UserERC721AFilterer, error) {
	contract, err := bindUserERC721A(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UserERC721AFilterer{contract: contract}, nil
}

// bindUserERC721A binds a generic wrapper to an already deployed contract.
func bindUserERC721A(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UserERC721AMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserERC721A *UserERC721ARaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserERC721A.Contract.UserERC721ACaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserERC721A *UserERC721ARaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserERC721A.Contract.UserERC721ATransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserERC721A *UserERC721ARaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserERC721A.Contract.UserERC721ATransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UserERC721A *UserERC721ACallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UserERC721A.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UserERC721A *UserERC721ATransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserERC721A.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UserERC721A *UserERC721ATransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UserERC721A.Contract.contract.Transact(opts, method, params...)
}

// ISPUBLICMINTINGOPEN is a free data retrieval call binding the contract method 0x1be5cfff.
//
// Solidity: function IS_PUBLIC_MINTING_OPEN() view returns(bool)
func (_UserERC721A *UserERC721ACaller) ISPUBLICMINTINGOPEN(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "IS_PUBLIC_MINTING_OPEN")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ISPUBLICMINTINGOPEN is a free data retrieval call binding the contract method 0x1be5cfff.
//
// Solidity: function IS_PUBLIC_MINTING_OPEN() view returns(bool)
func (_UserERC721A *UserERC721ASession) ISPUBLICMINTINGOPEN() (bool, error) {
	return _UserERC721A.Contract.ISPUBLICMINTINGOPEN(&_UserERC721A.CallOpts)
}

// ISPUBLICMINTINGOPEN is a free data retrieval call binding the contract method 0x1be5cfff.
//
// Solidity: function IS_PUBLIC_MINTING_OPEN() view returns(bool)
func (_UserERC721A *UserERC721ACallerSession) ISPUBLICMINTINGOPEN() (bool, error) {
	return _UserERC721A.Contract.ISPUBLICMINTINGOPEN(&_UserERC721A.CallOpts)
}

// AccountMintCount is a free data retrieval call binding the contract method 0xbd214423.
//
// Solidity: function accountMintCount(address ) view returns(uint256)
func (_UserERC721A *UserERC721ACaller) AccountMintCount(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "accountMintCount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountMintCount is a free data retrieval call binding the contract method 0xbd214423.
//
// Solidity: function accountMintCount(address ) view returns(uint256)
func (_UserERC721A *UserERC721ASession) AccountMintCount(arg0 common.Address) (*big.Int, error) {
	return _UserERC721A.Contract.AccountMintCount(&_UserERC721A.CallOpts, arg0)
}

// AccountMintCount is a free data retrieval call binding the contract method 0xbd214423.
//
// Solidity: function accountMintCount(address ) view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) AccountMintCount(arg0 common.Address) (*big.Int, error) {
	return _UserERC721A.Contract.AccountMintCount(&_UserERC721A.CallOpts, arg0)
}

// AmountWithdrawn is a free data retrieval call binding the contract method 0x0d662a1f.
//
// Solidity: function amountWithdrawn() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) AmountWithdrawn(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "amountWithdrawn")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AmountWithdrawn is a free data retrieval call binding the contract method 0x0d662a1f.
//
// Solidity: function amountWithdrawn() view returns(uint256)
func (_UserERC721A *UserERC721ASession) AmountWithdrawn() (*big.Int, error) {
	return _UserERC721A.Contract.AmountWithdrawn(&_UserERC721A.CallOpts)
}

// AmountWithdrawn is a free data retrieval call binding the contract method 0x0d662a1f.
//
// Solidity: function amountWithdrawn() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) AmountWithdrawn() (*big.Int, error) {
	return _UserERC721A.Contract.AmountWithdrawn(&_UserERC721A.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_UserERC721A *UserERC721ACaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_UserERC721A *UserERC721ASession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _UserERC721A.Contract.BalanceOf(&_UserERC721A.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _UserERC721A.Contract.BalanceOf(&_UserERC721A.CallOpts, owner)
}

// BuyBackEnabled is a free data retrieval call binding the contract method 0x6053a0e3.
//
// Solidity: function buyBackEnabled() view returns(bool)
func (_UserERC721A *UserERC721ACaller) BuyBackEnabled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "buyBackEnabled")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BuyBackEnabled is a free data retrieval call binding the contract method 0x6053a0e3.
//
// Solidity: function buyBackEnabled() view returns(bool)
func (_UserERC721A *UserERC721ASession) BuyBackEnabled() (bool, error) {
	return _UserERC721A.Contract.BuyBackEnabled(&_UserERC721A.CallOpts)
}

// BuyBackEnabled is a free data retrieval call binding the contract method 0x6053a0e3.
//
// Solidity: function buyBackEnabled() view returns(bool)
func (_UserERC721A *UserERC721ACallerSession) BuyBackEnabled() (bool, error) {
	return _UserERC721A.Contract.BuyBackEnabled(&_UserERC721A.CallOpts)
}

// BuyBackPrice is a free data retrieval call binding the contract method 0xe23000a0.
//
// Solidity: function buyBackPrice() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) BuyBackPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "buyBackPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BuyBackPrice is a free data retrieval call binding the contract method 0xe23000a0.
//
// Solidity: function buyBackPrice() view returns(uint256)
func (_UserERC721A *UserERC721ASession) BuyBackPrice() (*big.Int, error) {
	return _UserERC721A.Contract.BuyBackPrice(&_UserERC721A.CallOpts)
}

// BuyBackPrice is a free data retrieval call binding the contract method 0xe23000a0.
//
// Solidity: function buyBackPrice() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) BuyBackPrice() (*big.Int, error) {
	return _UserERC721A.Contract.BuyBackPrice(&_UserERC721A.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_UserERC721A *UserERC721ACaller) ContractURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "contractURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_UserERC721A *UserERC721ASession) ContractURI() (string, error) {
	return _UserERC721A.Contract.ContractURI(&_UserERC721A.CallOpts)
}

// ContractURI is a free data retrieval call binding the contract method 0xe8a3d485.
//
// Solidity: function contractURI() view returns(string)
func (_UserERC721A *UserERC721ACallerSession) ContractURI() (string, error) {
	return _UserERC721A.Contract.ContractURI(&_UserERC721A.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_UserERC721A *UserERC721ACaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_UserERC721A *UserERC721ASession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _UserERC721A.Contract.GetApproved(&_UserERC721A.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_UserERC721A *UserERC721ACallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _UserERC721A.Contract.GetApproved(&_UserERC721A.CallOpts, tokenId)
}

// GetMintsUsed is a free data retrieval call binding the contract method 0x63331301.
//
// Solidity: function getMintsUsed(address account) view returns(uint256)
func (_UserERC721A *UserERC721ACaller) GetMintsUsed(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "getMintsUsed", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMintsUsed is a free data retrieval call binding the contract method 0x63331301.
//
// Solidity: function getMintsUsed(address account) view returns(uint256)
func (_UserERC721A *UserERC721ASession) GetMintsUsed(account common.Address) (*big.Int, error) {
	return _UserERC721A.Contract.GetMintsUsed(&_UserERC721A.CallOpts, account)
}

// GetMintsUsed is a free data retrieval call binding the contract method 0x63331301.
//
// Solidity: function getMintsUsed(address account) view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) GetMintsUsed(account common.Address) (*big.Int, error) {
	return _UserERC721A.Contract.GetMintsUsed(&_UserERC721A.CallOpts, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_UserERC721A *UserERC721ACaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_UserERC721A *UserERC721ASession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _UserERC721A.Contract.IsApprovedForAll(&_UserERC721A.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_UserERC721A *UserERC721ACallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _UserERC721A.Contract.IsApprovedForAll(&_UserERC721A.CallOpts, owner, operator)
}

// IsTokenAvailable is a free data retrieval call binding the contract method 0x702cbbae.
//
// Solidity: function isTokenAvailable(uint256 tokenID) view returns(bool)
func (_UserERC721A *UserERC721ACaller) IsTokenAvailable(opts *bind.CallOpts, tokenID *big.Int) (bool, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "isTokenAvailable", tokenID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTokenAvailable is a free data retrieval call binding the contract method 0x702cbbae.
//
// Solidity: function isTokenAvailable(uint256 tokenID) view returns(bool)
func (_UserERC721A *UserERC721ASession) IsTokenAvailable(tokenID *big.Int) (bool, error) {
	return _UserERC721A.Contract.IsTokenAvailable(&_UserERC721A.CallOpts, tokenID)
}

// IsTokenAvailable is a free data retrieval call binding the contract method 0x702cbbae.
//
// Solidity: function isTokenAvailable(uint256 tokenID) view returns(bool)
func (_UserERC721A *UserERC721ACallerSession) IsTokenAvailable(tokenID *big.Int) (bool, error) {
	return _UserERC721A.Contract.IsTokenAvailable(&_UserERC721A.CallOpts, tokenID)
}

// LockBaseUri is a free data retrieval call binding the contract method 0x312767ca.
//
// Solidity: function lockBaseUri() view returns(bool)
func (_UserERC721A *UserERC721ACaller) LockBaseUri(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "lockBaseUri")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// LockBaseUri is a free data retrieval call binding the contract method 0x312767ca.
//
// Solidity: function lockBaseUri() view returns(bool)
func (_UserERC721A *UserERC721ASession) LockBaseUri() (bool, error) {
	return _UserERC721A.Contract.LockBaseUri(&_UserERC721A.CallOpts)
}

// LockBaseUri is a free data retrieval call binding the contract method 0x312767ca.
//
// Solidity: function lockBaseUri() view returns(bool)
func (_UserERC721A *UserERC721ACallerSession) LockBaseUri() (bool, error) {
	return _UserERC721A.Contract.LockBaseUri(&_UserERC721A.CallOpts)
}

// MaxMintsPerWallet is a free data retrieval call binding the contract method 0xf516a2e6.
//
// Solidity: function maxMintsPerWallet() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) MaxMintsPerWallet(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "maxMintsPerWallet")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxMintsPerWallet is a free data retrieval call binding the contract method 0xf516a2e6.
//
// Solidity: function maxMintsPerWallet() view returns(uint256)
func (_UserERC721A *UserERC721ASession) MaxMintsPerWallet() (*big.Int, error) {
	return _UserERC721A.Contract.MaxMintsPerWallet(&_UserERC721A.CallOpts)
}

// MaxMintsPerWallet is a free data retrieval call binding the contract method 0xf516a2e6.
//
// Solidity: function maxMintsPerWallet() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) MaxMintsPerWallet() (*big.Int, error) {
	return _UserERC721A.Contract.MaxMintsPerWallet(&_UserERC721A.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) MintFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "mintFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_UserERC721A *UserERC721ASession) MintFee() (*big.Int, error) {
	return _UserERC721A.Contract.MintFee(&_UserERC721A.CallOpts)
}

// MintFee is a free data retrieval call binding the contract method 0x13966db5.
//
// Solidity: function mintFee() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) MintFee() (*big.Int, error) {
	return _UserERC721A.Contract.MintFee(&_UserERC721A.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_UserERC721A *UserERC721ACaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_UserERC721A *UserERC721ASession) Name() (string, error) {
	return _UserERC721A.Contract.Name(&_UserERC721A.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_UserERC721A *UserERC721ACallerSession) Name() (string, error) {
	return _UserERC721A.Contract.Name(&_UserERC721A.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserERC721A *UserERC721ACaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserERC721A *UserERC721ASession) Owner() (common.Address, error) {
	return _UserERC721A.Contract.Owner(&_UserERC721A.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UserERC721A *UserERC721ACallerSession) Owner() (common.Address, error) {
	return _UserERC721A.Contract.Owner(&_UserERC721A.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_UserERC721A *UserERC721ACaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_UserERC721A *UserERC721ASession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _UserERC721A.Contract.OwnerOf(&_UserERC721A.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_UserERC721A *UserERC721ACallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _UserERC721A.Contract.OwnerOf(&_UserERC721A.CallOpts, tokenId)
}

// PlaceholderImage is a free data retrieval call binding the contract method 0x448d8c5c.
//
// Solidity: function placeholderImage() view returns(string)
func (_UserERC721A *UserERC721ACaller) PlaceholderImage(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "placeholderImage")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// PlaceholderImage is a free data retrieval call binding the contract method 0x448d8c5c.
//
// Solidity: function placeholderImage() view returns(string)
func (_UserERC721A *UserERC721ASession) PlaceholderImage() (string, error) {
	return _UserERC721A.Contract.PlaceholderImage(&_UserERC721A.CallOpts)
}

// PlaceholderImage is a free data retrieval call binding the contract method 0x448d8c5c.
//
// Solidity: function placeholderImage() view returns(string)
func (_UserERC721A *UserERC721ACallerSession) PlaceholderImage() (string, error) {
	return _UserERC721A.Contract.PlaceholderImage(&_UserERC721A.CallOpts)
}

// Remaining is a free data retrieval call binding the contract method 0x55234ec0.
//
// Solidity: function remaining() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) Remaining(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "remaining")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Remaining is a free data retrieval call binding the contract method 0x55234ec0.
//
// Solidity: function remaining() view returns(uint256)
func (_UserERC721A *UserERC721ASession) Remaining() (*big.Int, error) {
	return _UserERC721A.Contract.Remaining(&_UserERC721A.CallOpts)
}

// Remaining is a free data retrieval call binding the contract method 0x55234ec0.
//
// Solidity: function remaining() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) Remaining() (*big.Int, error) {
	return _UserERC721A.Contract.Remaining(&_UserERC721A.CallOpts)
}

// Reserve is a free data retrieval call binding the contract method 0xcd3293de.
//
// Solidity: function reserve() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) Reserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "reserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Reserve is a free data retrieval call binding the contract method 0xcd3293de.
//
// Solidity: function reserve() view returns(uint256)
func (_UserERC721A *UserERC721ASession) Reserve() (*big.Int, error) {
	return _UserERC721A.Contract.Reserve(&_UserERC721A.CallOpts)
}

// Reserve is a free data retrieval call binding the contract method 0xcd3293de.
//
// Solidity: function reserve() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) Reserve() (*big.Int, error) {
	return _UserERC721A.Contract.Reserve(&_UserERC721A.CallOpts)
}

// RoyaltyBasis is a free data retrieval call binding the contract method 0xc6ec6909.
//
// Solidity: function royaltyBasis() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) RoyaltyBasis(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "royaltyBasis")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RoyaltyBasis is a free data retrieval call binding the contract method 0xc6ec6909.
//
// Solidity: function royaltyBasis() view returns(uint256)
func (_UserERC721A *UserERC721ASession) RoyaltyBasis() (*big.Int, error) {
	return _UserERC721A.Contract.RoyaltyBasis(&_UserERC721A.CallOpts)
}

// RoyaltyBasis is a free data retrieval call binding the contract method 0xc6ec6909.
//
// Solidity: function royaltyBasis() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) RoyaltyBasis() (*big.Int, error) {
	return _UserERC721A.Contract.RoyaltyBasis(&_UserERC721A.CallOpts)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_UserERC721A *UserERC721ACaller) RoyaltyInfo(opts *bind.CallOpts, _tokenId *big.Int, _salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "royaltyInfo", _tokenId, _salePrice)

	outstruct := new(struct {
		Receiver      common.Address
		RoyaltyAmount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Receiver = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.RoyaltyAmount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_UserERC721A *UserERC721ASession) RoyaltyInfo(_tokenId *big.Int, _salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _UserERC721A.Contract.RoyaltyInfo(&_UserERC721A.CallOpts, _tokenId, _salePrice)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _tokenId, uint256 _salePrice) view returns(address receiver, uint256 royaltyAmount)
func (_UserERC721A *UserERC721ACallerSession) RoyaltyInfo(_tokenId *big.Int, _salePrice *big.Int) (struct {
	Receiver      common.Address
	RoyaltyAmount *big.Int
}, error) {
	return _UserERC721A.Contract.RoyaltyInfo(&_UserERC721A.CallOpts, _tokenId, _salePrice)
}

// ShareAddress is a free data retrieval call binding the contract method 0x0754796b.
//
// Solidity: function shareAddress() view returns(address)
func (_UserERC721A *UserERC721ACaller) ShareAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "shareAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ShareAddress is a free data retrieval call binding the contract method 0x0754796b.
//
// Solidity: function shareAddress() view returns(address)
func (_UserERC721A *UserERC721ASession) ShareAddress() (common.Address, error) {
	return _UserERC721A.Contract.ShareAddress(&_UserERC721A.CallOpts)
}

// ShareAddress is a free data retrieval call binding the contract method 0x0754796b.
//
// Solidity: function shareAddress() view returns(address)
func (_UserERC721A *UserERC721ACallerSession) ShareAddress() (common.Address, error) {
	return _UserERC721A.Contract.ShareAddress(&_UserERC721A.CallOpts)
}

// SplitBasis is a free data retrieval call binding the contract method 0x6c2d27b5.
//
// Solidity: function splitBasis() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) SplitBasis(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "splitBasis")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SplitBasis is a free data retrieval call binding the contract method 0x6c2d27b5.
//
// Solidity: function splitBasis() view returns(uint256)
func (_UserERC721A *UserERC721ASession) SplitBasis() (*big.Int, error) {
	return _UserERC721A.Contract.SplitBasis(&_UserERC721A.CallOpts)
}

// SplitBasis is a free data retrieval call binding the contract method 0x6c2d27b5.
//
// Solidity: function splitBasis() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) SplitBasis() (*big.Int, error) {
	return _UserERC721A.Contract.SplitBasis(&_UserERC721A.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_UserERC721A *UserERC721ACaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_UserERC721A *UserERC721ASession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _UserERC721A.Contract.SupportsInterface(&_UserERC721A.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_UserERC721A *UserERC721ACallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _UserERC721A.Contract.SupportsInterface(&_UserERC721A.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_UserERC721A *UserERC721ACaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_UserERC721A *UserERC721ASession) Symbol() (string, error) {
	return _UserERC721A.Contract.Symbol(&_UserERC721A.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_UserERC721A *UserERC721ACallerSession) Symbol() (string, error) {
	return _UserERC721A.Contract.Symbol(&_UserERC721A.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_UserERC721A *UserERC721ACaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_UserERC721A *UserERC721ASession) TokenURI(tokenId *big.Int) (string, error) {
	return _UserERC721A.Contract.TokenURI(&_UserERC721A.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_UserERC721A *UserERC721ACallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _UserERC721A.Contract.TokenURI(&_UserERC721A.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_UserERC721A *UserERC721ACaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_UserERC721A *UserERC721ASession) TotalSupply() (*big.Int, error) {
	return _UserERC721A.Contract.TotalSupply(&_UserERC721A.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_UserERC721A *UserERC721ACallerSession) TotalSupply() (*big.Int, error) {
	return _UserERC721A.Contract.TotalSupply(&_UserERC721A.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_UserERC721A *UserERC721ACaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _UserERC721A.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_UserERC721A *UserERC721ASession) Version() (string, error) {
	return _UserERC721A.Contract.Version(&_UserERC721A.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_UserERC721A *UserERC721ACallerSession) Version() (string, error) {
	return _UserERC721A.Contract.Version(&_UserERC721A.CallOpts)
}

// Airdrop is a paid mutator transaction binding the contract method 0x729ad39e.
//
// Solidity: function airdrop(address[] to) returns()
func (_UserERC721A *UserERC721ATransactor) Airdrop(opts *bind.TransactOpts, to []common.Address) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "airdrop", to)
}

// Airdrop is a paid mutator transaction binding the contract method 0x729ad39e.
//
// Solidity: function airdrop(address[] to) returns()
func (_UserERC721A *UserERC721ASession) Airdrop(to []common.Address) (*types.Transaction, error) {
	return _UserERC721A.Contract.Airdrop(&_UserERC721A.TransactOpts, to)
}

// Airdrop is a paid mutator transaction binding the contract method 0x729ad39e.
//
// Solidity: function airdrop(address[] to) returns()
func (_UserERC721A *UserERC721ATransactorSession) Airdrop(to []common.Address) (*types.Transaction, error) {
	return _UserERC721A.Contract.Airdrop(&_UserERC721A.TransactOpts, to)
}

// Airdrop0 is a paid mutator transaction binding the contract method 0x8ba4cc3c.
//
// Solidity: function airdrop(address to, uint256 quantity) returns()
func (_UserERC721A *UserERC721ATransactor) Airdrop0(opts *bind.TransactOpts, to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "airdrop0", to, quantity)
}

// Airdrop0 is a paid mutator transaction binding the contract method 0x8ba4cc3c.
//
// Solidity: function airdrop(address to, uint256 quantity) returns()
func (_UserERC721A *UserERC721ASession) Airdrop0(to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.Airdrop0(&_UserERC721A.TransactOpts, to, quantity)
}

// Airdrop0 is a paid mutator transaction binding the contract method 0x8ba4cc3c.
//
// Solidity: function airdrop(address to, uint256 quantity) returns()
func (_UserERC721A *UserERC721ATransactorSession) Airdrop0(to common.Address, quantity *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.Airdrop0(&_UserERC721A.TransactOpts, to, quantity)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address operator, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ATransactor) Approve(opts *bind.TransactOpts, operator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "approve", operator, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address operator, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ASession) Approve(operator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.Approve(&_UserERC721A.TransactOpts, operator, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address operator, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ATransactorSession) Approve(operator common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.Approve(&_UserERC721A.TransactOpts, operator, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_UserERC721A *UserERC721ATransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_UserERC721A *UserERC721ASession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.Burn(&_UserERC721A.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_UserERC721A *UserERC721ATransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.Burn(&_UserERC721A.TransactOpts, tokenId)
}

// Buyback is a paid mutator transaction binding the contract method 0x79a9fa1c.
//
// Solidity: function buyback(uint256 tokenId) returns()
func (_UserERC721A *UserERC721ATransactor) Buyback(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "buyback", tokenId)
}

// Buyback is a paid mutator transaction binding the contract method 0x79a9fa1c.
//
// Solidity: function buyback(uint256 tokenId) returns()
func (_UserERC721A *UserERC721ASession) Buyback(tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.Buyback(&_UserERC721A.TransactOpts, tokenId)
}

// Buyback is a paid mutator transaction binding the contract method 0x79a9fa1c.
//
// Solidity: function buyback(uint256 tokenId) returns()
func (_UserERC721A *UserERC721ATransactorSession) Buyback(tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.Buyback(&_UserERC721A.TransactOpts, tokenId)
}

// ChangeBaseUri is a paid mutator transaction binding the contract method 0x492d306b.
//
// Solidity: function changeBaseUri(string baseURI_) returns()
func (_UserERC721A *UserERC721ATransactor) ChangeBaseUri(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "changeBaseUri", baseURI_)
}

// ChangeBaseUri is a paid mutator transaction binding the contract method 0x492d306b.
//
// Solidity: function changeBaseUri(string baseURI_) returns()
func (_UserERC721A *UserERC721ASession) ChangeBaseUri(baseURI_ string) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangeBaseUri(&_UserERC721A.TransactOpts, baseURI_)
}

// ChangeBaseUri is a paid mutator transaction binding the contract method 0x492d306b.
//
// Solidity: function changeBaseUri(string baseURI_) returns()
func (_UserERC721A *UserERC721ATransactorSession) ChangeBaseUri(baseURI_ string) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangeBaseUri(&_UserERC721A.TransactOpts, baseURI_)
}

// ChangeBuyBackEnabled is a paid mutator transaction binding the contract method 0xe2d76cff.
//
// Solidity: function changeBuyBackEnabled(bool _buyBackEnabled, uint256 _buyBackPrice) returns()
func (_UserERC721A *UserERC721ATransactor) ChangeBuyBackEnabled(opts *bind.TransactOpts, _buyBackEnabled bool, _buyBackPrice *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "changeBuyBackEnabled", _buyBackEnabled, _buyBackPrice)
}

// ChangeBuyBackEnabled is a paid mutator transaction binding the contract method 0xe2d76cff.
//
// Solidity: function changeBuyBackEnabled(bool _buyBackEnabled, uint256 _buyBackPrice) returns()
func (_UserERC721A *UserERC721ASession) ChangeBuyBackEnabled(_buyBackEnabled bool, _buyBackPrice *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangeBuyBackEnabled(&_UserERC721A.TransactOpts, _buyBackEnabled, _buyBackPrice)
}

// ChangeBuyBackEnabled is a paid mutator transaction binding the contract method 0xe2d76cff.
//
// Solidity: function changeBuyBackEnabled(bool _buyBackEnabled, uint256 _buyBackPrice) returns()
func (_UserERC721A *UserERC721ATransactorSession) ChangeBuyBackEnabled(_buyBackEnabled bool, _buyBackPrice *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangeBuyBackEnabled(&_UserERC721A.TransactOpts, _buyBackEnabled, _buyBackPrice)
}

// ChangeMintFee is a paid mutator transaction binding the contract method 0xe929d669.
//
// Solidity: function changeMintFee(uint256 mintFee_) returns()
func (_UserERC721A *UserERC721ATransactor) ChangeMintFee(opts *bind.TransactOpts, mintFee_ *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "changeMintFee", mintFee_)
}

// ChangeMintFee is a paid mutator transaction binding the contract method 0xe929d669.
//
// Solidity: function changeMintFee(uint256 mintFee_) returns()
func (_UserERC721A *UserERC721ASession) ChangeMintFee(mintFee_ *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangeMintFee(&_UserERC721A.TransactOpts, mintFee_)
}

// ChangeMintFee is a paid mutator transaction binding the contract method 0xe929d669.
//
// Solidity: function changeMintFee(uint256 mintFee_) returns()
func (_UserERC721A *UserERC721ATransactorSession) ChangeMintFee(mintFee_ *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangeMintFee(&_UserERC721A.TransactOpts, mintFee_)
}

// ChangeMintLimit is a paid mutator transaction binding the contract method 0x34259b5c.
//
// Solidity: function changeMintLimit(uint256 mintLimit_) returns()
func (_UserERC721A *UserERC721ATransactor) ChangeMintLimit(opts *bind.TransactOpts, mintLimit_ *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "changeMintLimit", mintLimit_)
}

// ChangeMintLimit is a paid mutator transaction binding the contract method 0x34259b5c.
//
// Solidity: function changeMintLimit(uint256 mintLimit_) returns()
func (_UserERC721A *UserERC721ASession) ChangeMintLimit(mintLimit_ *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangeMintLimit(&_UserERC721A.TransactOpts, mintLimit_)
}

// ChangeMintLimit is a paid mutator transaction binding the contract method 0x34259b5c.
//
// Solidity: function changeMintLimit(uint256 mintLimit_) returns()
func (_UserERC721A *UserERC721ATransactorSession) ChangeMintLimit(mintLimit_ *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangeMintLimit(&_UserERC721A.TransactOpts, mintLimit_)
}

// ChangePlaceholderImage is a paid mutator transaction binding the contract method 0xe829f524.
//
// Solidity: function changePlaceholderImage(string placeholderImage_) returns()
func (_UserERC721A *UserERC721ATransactor) ChangePlaceholderImage(opts *bind.TransactOpts, placeholderImage_ string) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "changePlaceholderImage", placeholderImage_)
}

// ChangePlaceholderImage is a paid mutator transaction binding the contract method 0xe829f524.
//
// Solidity: function changePlaceholderImage(string placeholderImage_) returns()
func (_UserERC721A *UserERC721ASession) ChangePlaceholderImage(placeholderImage_ string) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangePlaceholderImage(&_UserERC721A.TransactOpts, placeholderImage_)
}

// ChangePlaceholderImage is a paid mutator transaction binding the contract method 0xe829f524.
//
// Solidity: function changePlaceholderImage(string placeholderImage_) returns()
func (_UserERC721A *UserERC721ATransactorSession) ChangePlaceholderImage(placeholderImage_ string) (*types.Transaction, error) {
	return _UserERC721A.Contract.ChangePlaceholderImage(&_UserERC721A.TransactOpts, placeholderImage_)
}

// Initialize is a paid mutator transaction binding the contract method 0xe1cd3436.
//
// Solidity: function initialize(string name_, string symbol_, string baseURI_, uint256 mintFee_, uint256 size_, address whiteListSignerAddress_, uint256 mintLimit_, uint256 royaltyBasis_, string placeholderImage_, address shareAddress_, uint256 splitBasis_, bool publicMintEnabled_) returns()
func (_UserERC721A *UserERC721ATransactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string, baseURI_ string, mintFee_ *big.Int, size_ *big.Int, whiteListSignerAddress_ common.Address, mintLimit_ *big.Int, royaltyBasis_ *big.Int, placeholderImage_ string, shareAddress_ common.Address, splitBasis_ *big.Int, publicMintEnabled_ bool) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "initialize", name_, symbol_, baseURI_, mintFee_, size_, whiteListSignerAddress_, mintLimit_, royaltyBasis_, placeholderImage_, shareAddress_, splitBasis_, publicMintEnabled_)
}

// Initialize is a paid mutator transaction binding the contract method 0xe1cd3436.
//
// Solidity: function initialize(string name_, string symbol_, string baseURI_, uint256 mintFee_, uint256 size_, address whiteListSignerAddress_, uint256 mintLimit_, uint256 royaltyBasis_, string placeholderImage_, address shareAddress_, uint256 splitBasis_, bool publicMintEnabled_) returns()
func (_UserERC721A *UserERC721ASession) Initialize(name_ string, symbol_ string, baseURI_ string, mintFee_ *big.Int, size_ *big.Int, whiteListSignerAddress_ common.Address, mintLimit_ *big.Int, royaltyBasis_ *big.Int, placeholderImage_ string, shareAddress_ common.Address, splitBasis_ *big.Int, publicMintEnabled_ bool) (*types.Transaction, error) {
	return _UserERC721A.Contract.Initialize(&_UserERC721A.TransactOpts, name_, symbol_, baseURI_, mintFee_, size_, whiteListSignerAddress_, mintLimit_, royaltyBasis_, placeholderImage_, shareAddress_, splitBasis_, publicMintEnabled_)
}

// Initialize is a paid mutator transaction binding the contract method 0xe1cd3436.
//
// Solidity: function initialize(string name_, string symbol_, string baseURI_, uint256 mintFee_, uint256 size_, address whiteListSignerAddress_, uint256 mintLimit_, uint256 royaltyBasis_, string placeholderImage_, address shareAddress_, uint256 splitBasis_, bool publicMintEnabled_) returns()
func (_UserERC721A *UserERC721ATransactorSession) Initialize(name_ string, symbol_ string, baseURI_ string, mintFee_ *big.Int, size_ *big.Int, whiteListSignerAddress_ common.Address, mintLimit_ *big.Int, royaltyBasis_ *big.Int, placeholderImage_ string, shareAddress_ common.Address, splitBasis_ *big.Int, publicMintEnabled_ bool) (*types.Transaction, error) {
	return _UserERC721A.Contract.Initialize(&_UserERC721A.TransactOpts, name_, symbol_, baseURI_, mintFee_, size_, whiteListSignerAddress_, mintLimit_, royaltyBasis_, placeholderImage_, shareAddress_, splitBasis_, publicMintEnabled_)
}

// Mint is a paid mutator transaction binding the contract method 0x77097fc8.
//
// Solidity: function mint(uint256 quantity, string channel) payable returns()
func (_UserERC721A *UserERC721ATransactor) Mint(opts *bind.TransactOpts, quantity *big.Int, channel string) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "mint", quantity, channel)
}

// Mint is a paid mutator transaction binding the contract method 0x77097fc8.
//
// Solidity: function mint(uint256 quantity, string channel) payable returns()
func (_UserERC721A *UserERC721ASession) Mint(quantity *big.Int, channel string) (*types.Transaction, error) {
	return _UserERC721A.Contract.Mint(&_UserERC721A.TransactOpts, quantity, channel)
}

// Mint is a paid mutator transaction binding the contract method 0x77097fc8.
//
// Solidity: function mint(uint256 quantity, string channel) payable returns()
func (_UserERC721A *UserERC721ATransactorSession) Mint(quantity *big.Int, channel string) (*types.Transaction, error) {
	return _UserERC721A.Contract.Mint(&_UserERC721A.TransactOpts, quantity, channel)
}

// MintWithSignature is a paid mutator transaction binding the contract method 0xf2aff6ec.
//
// Solidity: function mintWithSignature(bool isFree, address to, uint256 customFee, uint256 limit, uint256 quantity, bytes signature, string channel) payable returns()
func (_UserERC721A *UserERC721ATransactor) MintWithSignature(opts *bind.TransactOpts, isFree bool, to common.Address, customFee *big.Int, limit *big.Int, quantity *big.Int, signature []byte, channel string) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "mintWithSignature", isFree, to, customFee, limit, quantity, signature, channel)
}

// MintWithSignature is a paid mutator transaction binding the contract method 0xf2aff6ec.
//
// Solidity: function mintWithSignature(bool isFree, address to, uint256 customFee, uint256 limit, uint256 quantity, bytes signature, string channel) payable returns()
func (_UserERC721A *UserERC721ASession) MintWithSignature(isFree bool, to common.Address, customFee *big.Int, limit *big.Int, quantity *big.Int, signature []byte, channel string) (*types.Transaction, error) {
	return _UserERC721A.Contract.MintWithSignature(&_UserERC721A.TransactOpts, isFree, to, customFee, limit, quantity, signature, channel)
}

// MintWithSignature is a paid mutator transaction binding the contract method 0xf2aff6ec.
//
// Solidity: function mintWithSignature(bool isFree, address to, uint256 customFee, uint256 limit, uint256 quantity, bytes signature, string channel) payable returns()
func (_UserERC721A *UserERC721ATransactorSession) MintWithSignature(isFree bool, to common.Address, customFee *big.Int, limit *big.Int, quantity *big.Int, signature []byte, channel string) (*types.Transaction, error) {
	return _UserERC721A.Contract.MintWithSignature(&_UserERC721A.TransactOpts, isFree, to, customFee, limit, quantity, signature, channel)
}

// PermanentlyLockBaseUri is a paid mutator transaction binding the contract method 0xecbb0905.
//
// Solidity: function permanentlyLockBaseUri() returns()
func (_UserERC721A *UserERC721ATransactor) PermanentlyLockBaseUri(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "permanentlyLockBaseUri")
}

// PermanentlyLockBaseUri is a paid mutator transaction binding the contract method 0xecbb0905.
//
// Solidity: function permanentlyLockBaseUri() returns()
func (_UserERC721A *UserERC721ASession) PermanentlyLockBaseUri() (*types.Transaction, error) {
	return _UserERC721A.Contract.PermanentlyLockBaseUri(&_UserERC721A.TransactOpts)
}

// PermanentlyLockBaseUri is a paid mutator transaction binding the contract method 0xecbb0905.
//
// Solidity: function permanentlyLockBaseUri() returns()
func (_UserERC721A *UserERC721ATransactorSession) PermanentlyLockBaseUri() (*types.Transaction, error) {
	return _UserERC721A.Contract.PermanentlyLockBaseUri(&_UserERC721A.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserERC721A *UserERC721ATransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserERC721A *UserERC721ASession) RenounceOwnership() (*types.Transaction, error) {
	return _UserERC721A.Contract.RenounceOwnership(&_UserERC721A.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UserERC721A *UserERC721ATransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UserERC721A.Contract.RenounceOwnership(&_UserERC721A.TransactOpts)
}

// Reveal is a paid mutator transaction binding the contract method 0x4c261247.
//
// Solidity: function reveal(string baseURI_) returns()
func (_UserERC721A *UserERC721ATransactor) Reveal(opts *bind.TransactOpts, baseURI_ string) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "reveal", baseURI_)
}

// Reveal is a paid mutator transaction binding the contract method 0x4c261247.
//
// Solidity: function reveal(string baseURI_) returns()
func (_UserERC721A *UserERC721ASession) Reveal(baseURI_ string) (*types.Transaction, error) {
	return _UserERC721A.Contract.Reveal(&_UserERC721A.TransactOpts, baseURI_)
}

// Reveal is a paid mutator transaction binding the contract method 0x4c261247.
//
// Solidity: function reveal(string baseURI_) returns()
func (_UserERC721A *UserERC721ATransactorSession) Reveal(baseURI_ string) (*types.Transaction, error) {
	return _UserERC721A.Contract.Reveal(&_UserERC721A.TransactOpts, baseURI_)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ATransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ASession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.SafeTransferFrom(&_UserERC721A.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ATransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.SafeTransferFrom(&_UserERC721A.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) payable returns()
func (_UserERC721A *UserERC721ATransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) payable returns()
func (_UserERC721A *UserERC721ASession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _UserERC721A.Contract.SafeTransferFrom0(&_UserERC721A.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) payable returns()
func (_UserERC721A *UserERC721ATransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _UserERC721A.Contract.SafeTransferFrom0(&_UserERC721A.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_UserERC721A *UserERC721ATransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_UserERC721A *UserERC721ASession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _UserERC721A.Contract.SetApprovalForAll(&_UserERC721A.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_UserERC721A *UserERC721ATransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _UserERC721A.Contract.SetApprovalForAll(&_UserERC721A.TransactOpts, operator, approved)
}

// TogglePublicMinting is a paid mutator transaction binding the contract method 0x6b8a21fc.
//
// Solidity: function togglePublicMinting() returns()
func (_UserERC721A *UserERC721ATransactor) TogglePublicMinting(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "togglePublicMinting")
}

// TogglePublicMinting is a paid mutator transaction binding the contract method 0x6b8a21fc.
//
// Solidity: function togglePublicMinting() returns()
func (_UserERC721A *UserERC721ASession) TogglePublicMinting() (*types.Transaction, error) {
	return _UserERC721A.Contract.TogglePublicMinting(&_UserERC721A.TransactOpts)
}

// TogglePublicMinting is a paid mutator transaction binding the contract method 0x6b8a21fc.
//
// Solidity: function togglePublicMinting() returns()
func (_UserERC721A *UserERC721ATransactorSession) TogglePublicMinting() (*types.Transaction, error) {
	return _UserERC721A.Contract.TogglePublicMinting(&_UserERC721A.TransactOpts)
}

// TransferBalance is a paid mutator transaction binding the contract method 0x56a6d9ef.
//
// Solidity: function transferBalance(address to, uint256 amount) returns()
func (_UserERC721A *UserERC721ATransactor) TransferBalance(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "transferBalance", to, amount)
}

// TransferBalance is a paid mutator transaction binding the contract method 0x56a6d9ef.
//
// Solidity: function transferBalance(address to, uint256 amount) returns()
func (_UserERC721A *UserERC721ASession) TransferBalance(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.TransferBalance(&_UserERC721A.TransactOpts, to, amount)
}

// TransferBalance is a paid mutator transaction binding the contract method 0x56a6d9ef.
//
// Solidity: function transferBalance(address to, uint256 amount) returns()
func (_UserERC721A *UserERC721ATransactorSession) TransferBalance(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.TransferBalance(&_UserERC721A.TransactOpts, to, amount)
}

// TransferERC20Balance is a paid mutator transaction binding the contract method 0x29f61b08.
//
// Solidity: function transferERC20Balance(address erc20ContractAddress, address to, uint256 amount) returns()
func (_UserERC721A *UserERC721ATransactor) TransferERC20Balance(opts *bind.TransactOpts, erc20ContractAddress common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "transferERC20Balance", erc20ContractAddress, to, amount)
}

// TransferERC20Balance is a paid mutator transaction binding the contract method 0x29f61b08.
//
// Solidity: function transferERC20Balance(address erc20ContractAddress, address to, uint256 amount) returns()
func (_UserERC721A *UserERC721ASession) TransferERC20Balance(erc20ContractAddress common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.TransferERC20Balance(&_UserERC721A.TransactOpts, erc20ContractAddress, to, amount)
}

// TransferERC20Balance is a paid mutator transaction binding the contract method 0x29f61b08.
//
// Solidity: function transferERC20Balance(address erc20ContractAddress, address to, uint256 amount) returns()
func (_UserERC721A *UserERC721ATransactorSession) TransferERC20Balance(erc20ContractAddress common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.TransferERC20Balance(&_UserERC721A.TransactOpts, erc20ContractAddress, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ATransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ASession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.TransferFrom(&_UserERC721A.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) payable returns()
func (_UserERC721A *UserERC721ATransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.TransferFrom(&_UserERC721A.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserERC721A *UserERC721ATransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserERC721A *UserERC721ASession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UserERC721A.Contract.TransferOwnership(&_UserERC721A.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UserERC721A *UserERC721ATransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UserERC721A.Contract.TransferOwnership(&_UserERC721A.TransactOpts, newOwner)
}

// UpdateReserveAmount is a paid mutator transaction binding the contract method 0x5729083a.
//
// Solidity: function updateReserveAmount(uint256 amount) returns()
func (_UserERC721A *UserERC721ATransactor) UpdateReserveAmount(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.contract.Transact(opts, "updateReserveAmount", amount)
}

// UpdateReserveAmount is a paid mutator transaction binding the contract method 0x5729083a.
//
// Solidity: function updateReserveAmount(uint256 amount) returns()
func (_UserERC721A *UserERC721ASession) UpdateReserveAmount(amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.UpdateReserveAmount(&_UserERC721A.TransactOpts, amount)
}

// UpdateReserveAmount is a paid mutator transaction binding the contract method 0x5729083a.
//
// Solidity: function updateReserveAmount(uint256 amount) returns()
func (_UserERC721A *UserERC721ATransactorSession) UpdateReserveAmount(amount *big.Int) (*types.Transaction, error) {
	return _UserERC721A.Contract.UpdateReserveAmount(&_UserERC721A.TransactOpts, amount)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UserERC721A *UserERC721ATransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UserERC721A.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UserERC721A *UserERC721ASession) Receive() (*types.Transaction, error) {
	return _UserERC721A.Contract.Receive(&_UserERC721A.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_UserERC721A *UserERC721ATransactorSession) Receive() (*types.Transaction, error) {
	return _UserERC721A.Contract.Receive(&_UserERC721A.TransactOpts)
}

// UserERC721AApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the UserERC721A contract.
type UserERC721AApprovalIterator struct {
	Event *UserERC721AApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721AApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721AApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721AApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721AApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721AApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721AApproval represents a Approval event raised by the UserERC721A contract.
type UserERC721AApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_UserERC721A *UserERC721AFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*UserERC721AApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721AApprovalIterator{contract: _UserERC721A.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_UserERC721A *UserERC721AFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *UserERC721AApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721AApproval)
				if err := _UserERC721A.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_UserERC721A *UserERC721AFilterer) ParseApproval(log types.Log) (*UserERC721AApproval, error) {
	event := new(UserERC721AApproval)
	if err := _UserERC721A.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721AApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the UserERC721A contract.
type UserERC721AApprovalForAllIterator struct {
	Event *UserERC721AApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721AApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721AApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721AApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721AApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721AApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721AApprovalForAll represents a ApprovalForAll event raised by the UserERC721A contract.
type UserERC721AApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_UserERC721A *UserERC721AFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*UserERC721AApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721AApprovalForAllIterator{contract: _UserERC721A.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_UserERC721A *UserERC721AFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *UserERC721AApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721AApprovalForAll)
				if err := _UserERC721A.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_UserERC721A *UserERC721AFilterer) ParseApprovalForAll(log types.Log) (*UserERC721AApprovalForAll, error) {
	event := new(UserERC721AApprovalForAll)
	if err := _UserERC721A.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721ABalanceTransferredIterator is returned from FilterBalanceTransferred and is used to iterate over the raw logs and unpacked data for BalanceTransferred events raised by the UserERC721A contract.
type UserERC721ABalanceTransferredIterator struct {
	Event *UserERC721ABalanceTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721ABalanceTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721ABalanceTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721ABalanceTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721ABalanceTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721ABalanceTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721ABalanceTransferred represents a BalanceTransferred event raised by the UserERC721A contract.
type UserERC721ABalanceTransferred struct {
	To             common.Address
	Amount         *big.Int
	PlatformProfit *big.Int
	UserProfit     *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterBalanceTransferred is a free log retrieval operation binding the contract event 0xd9ea4ea293bcae114b3182a0fe971d66dba10eef3d3eef2a088eb54103dcda65.
//
// Solidity: event BalanceTransferred(address indexed to, uint256 indexed amount, uint256 platformProfit, uint256 userProfit)
func (_UserERC721A *UserERC721AFilterer) FilterBalanceTransferred(opts *bind.FilterOpts, to []common.Address, amount []*big.Int) (*UserERC721ABalanceTransferredIterator, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "BalanceTransferred", toRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721ABalanceTransferredIterator{contract: _UserERC721A.contract, event: "BalanceTransferred", logs: logs, sub: sub}, nil
}

// WatchBalanceTransferred is a free log subscription operation binding the contract event 0xd9ea4ea293bcae114b3182a0fe971d66dba10eef3d3eef2a088eb54103dcda65.
//
// Solidity: event BalanceTransferred(address indexed to, uint256 indexed amount, uint256 platformProfit, uint256 userProfit)
func (_UserERC721A *UserERC721AFilterer) WatchBalanceTransferred(opts *bind.WatchOpts, sink chan<- *UserERC721ABalanceTransferred, to []common.Address, amount []*big.Int) (event.Subscription, error) {

	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "BalanceTransferred", toRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721ABalanceTransferred)
				if err := _UserERC721A.contract.UnpackLog(event, "BalanceTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceTransferred is a log parse operation binding the contract event 0xd9ea4ea293bcae114b3182a0fe971d66dba10eef3d3eef2a088eb54103dcda65.
//
// Solidity: event BalanceTransferred(address indexed to, uint256 indexed amount, uint256 platformProfit, uint256 userProfit)
func (_UserERC721A *UserERC721AFilterer) ParseBalanceTransferred(log types.Log) (*UserERC721ABalanceTransferred, error) {
	event := new(UserERC721ABalanceTransferred)
	if err := _UserERC721A.contract.UnpackLog(event, "BalanceTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721ABuyBackIterator is returned from FilterBuyBack and is used to iterate over the raw logs and unpacked data for BuyBack events raised by the UserERC721A contract.
type UserERC721ABuyBackIterator struct {
	Event *UserERC721ABuyBack // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721ABuyBackIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721ABuyBack)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721ABuyBack)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721ABuyBackIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721ABuyBackIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721ABuyBack represents a BuyBack event raised by the UserERC721A contract.
type UserERC721ABuyBack struct {
	Owner   common.Address
	TokenId *big.Int
	Price   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBuyBack is a free log retrieval operation binding the contract event 0x79650a26d9c122dcabbd86157b7bdabd291e5058cef11fc21c572518a1690ee6.
//
// Solidity: event BuyBack(address indexed owner, uint256 indexed tokenId, uint256 price)
func (_UserERC721A *UserERC721AFilterer) FilterBuyBack(opts *bind.FilterOpts, owner []common.Address, tokenId []*big.Int) (*UserERC721ABuyBackIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "BuyBack", ownerRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721ABuyBackIterator{contract: _UserERC721A.contract, event: "BuyBack", logs: logs, sub: sub}, nil
}

// WatchBuyBack is a free log subscription operation binding the contract event 0x79650a26d9c122dcabbd86157b7bdabd291e5058cef11fc21c572518a1690ee6.
//
// Solidity: event BuyBack(address indexed owner, uint256 indexed tokenId, uint256 price)
func (_UserERC721A *UserERC721AFilterer) WatchBuyBack(opts *bind.WatchOpts, sink chan<- *UserERC721ABuyBack, owner []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "BuyBack", ownerRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721ABuyBack)
				if err := _UserERC721A.contract.UnpackLog(event, "BuyBack", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBuyBack is a log parse operation binding the contract event 0x79650a26d9c122dcabbd86157b7bdabd291e5058cef11fc21c572518a1690ee6.
//
// Solidity: event BuyBack(address indexed owner, uint256 indexed tokenId, uint256 price)
func (_UserERC721A *UserERC721AFilterer) ParseBuyBack(log types.Log) (*UserERC721ABuyBack, error) {
	event := new(UserERC721ABuyBack)
	if err := _UserERC721A.contract.UnpackLog(event, "BuyBack", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721AConsecutiveTransferIterator is returned from FilterConsecutiveTransfer and is used to iterate over the raw logs and unpacked data for ConsecutiveTransfer events raised by the UserERC721A contract.
type UserERC721AConsecutiveTransferIterator struct {
	Event *UserERC721AConsecutiveTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721AConsecutiveTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721AConsecutiveTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721AConsecutiveTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721AConsecutiveTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721AConsecutiveTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721AConsecutiveTransfer represents a ConsecutiveTransfer event raised by the UserERC721A contract.
type UserERC721AConsecutiveTransfer struct {
	FromTokenId *big.Int
	ToTokenId   *big.Int
	From        common.Address
	To          common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterConsecutiveTransfer is a free log retrieval operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_UserERC721A *UserERC721AFilterer) FilterConsecutiveTransfer(opts *bind.FilterOpts, fromTokenId []*big.Int, from []common.Address, to []common.Address) (*UserERC721AConsecutiveTransferIterator, error) {

	var fromTokenIdRule []interface{}
	for _, fromTokenIdItem := range fromTokenId {
		fromTokenIdRule = append(fromTokenIdRule, fromTokenIdItem)
	}

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "ConsecutiveTransfer", fromTokenIdRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721AConsecutiveTransferIterator{contract: _UserERC721A.contract, event: "ConsecutiveTransfer", logs: logs, sub: sub}, nil
}

// WatchConsecutiveTransfer is a free log subscription operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_UserERC721A *UserERC721AFilterer) WatchConsecutiveTransfer(opts *bind.WatchOpts, sink chan<- *UserERC721AConsecutiveTransfer, fromTokenId []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromTokenIdRule []interface{}
	for _, fromTokenIdItem := range fromTokenId {
		fromTokenIdRule = append(fromTokenIdRule, fromTokenIdItem)
	}

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "ConsecutiveTransfer", fromTokenIdRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721AConsecutiveTransfer)
				if err := _UserERC721A.contract.UnpackLog(event, "ConsecutiveTransfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConsecutiveTransfer is a log parse operation binding the contract event 0xdeaa91b6123d068f5821d0fb0678463d1a8a6079fe8af5de3ce5e896dcf9133d.
//
// Solidity: event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to)
func (_UserERC721A *UserERC721AFilterer) ParseConsecutiveTransfer(log types.Log) (*UserERC721AConsecutiveTransfer, error) {
	event := new(UserERC721AConsecutiveTransfer)
	if err := _UserERC721A.contract.UnpackLog(event, "ConsecutiveTransfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721AInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the UserERC721A contract.
type UserERC721AInitializedIterator struct {
	Event *UserERC721AInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721AInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721AInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721AInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721AInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721AInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721AInitialized represents a Initialized event raised by the UserERC721A contract.
type UserERC721AInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_UserERC721A *UserERC721AFilterer) FilterInitialized(opts *bind.FilterOpts) (*UserERC721AInitializedIterator, error) {

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &UserERC721AInitializedIterator{contract: _UserERC721A.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_UserERC721A *UserERC721AFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *UserERC721AInitialized) (event.Subscription, error) {

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721AInitialized)
				if err := _UserERC721A.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_UserERC721A *UserERC721AFilterer) ParseInitialized(log types.Log) (*UserERC721AInitialized, error) {
	event := new(UserERC721AInitialized)
	if err := _UserERC721A.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721AMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the UserERC721A contract.
type UserERC721AMintIterator struct {
	Event *UserERC721AMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721AMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721AMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721AMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721AMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721AMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721AMint represents a Mint event raised by the UserERC721A contract.
type UserERC721AMint struct {
	Sender       common.Address
	BeginTokenId *big.Int
	EndTokenId   *big.Int
	Channel      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0xcd0e00beb8e6d5ab96ee16e6a1a735ff07cae8702f2e48feb32fefe40f25692c.
//
// Solidity: event Mint(address indexed sender, uint256 beginTokenId, uint256 endTokenId, string channel)
func (_UserERC721A *UserERC721AFilterer) FilterMint(opts *bind.FilterOpts, sender []common.Address) (*UserERC721AMintIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "Mint", senderRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721AMintIterator{contract: _UserERC721A.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0xcd0e00beb8e6d5ab96ee16e6a1a735ff07cae8702f2e48feb32fefe40f25692c.
//
// Solidity: event Mint(address indexed sender, uint256 beginTokenId, uint256 endTokenId, string channel)
func (_UserERC721A *UserERC721AFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *UserERC721AMint, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "Mint", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721AMint)
				if err := _UserERC721A.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0xcd0e00beb8e6d5ab96ee16e6a1a735ff07cae8702f2e48feb32fefe40f25692c.
//
// Solidity: event Mint(address indexed sender, uint256 beginTokenId, uint256 endTokenId, string channel)
func (_UserERC721A *UserERC721AFilterer) ParseMint(log types.Log) (*UserERC721AMint, error) {
	event := new(UserERC721AMint)
	if err := _UserERC721A.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721AMintWithSignatureIterator is returned from FilterMintWithSignature and is used to iterate over the raw logs and unpacked data for MintWithSignature events raised by the UserERC721A contract.
type UserERC721AMintWithSignatureIterator struct {
	Event *UserERC721AMintWithSignature // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721AMintWithSignatureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721AMintWithSignature)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721AMintWithSignature)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721AMintWithSignatureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721AMintWithSignatureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721AMintWithSignature represents a MintWithSignature event raised by the UserERC721A contract.
type UserERC721AMintWithSignature struct {
	Sender       common.Address
	BeginTokenId *big.Int
	EndTokenId   *big.Int
	Channel      string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMintWithSignature is a free log retrieval operation binding the contract event 0x8496c4890288e3b21ccf98329f0f417d546eda7e748a2589fa6cd44eed265a55.
//
// Solidity: event MintWithSignature(address indexed sender, uint256 beginTokenId, uint256 endTokenId, string channel)
func (_UserERC721A *UserERC721AFilterer) FilterMintWithSignature(opts *bind.FilterOpts, sender []common.Address) (*UserERC721AMintWithSignatureIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "MintWithSignature", senderRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721AMintWithSignatureIterator{contract: _UserERC721A.contract, event: "MintWithSignature", logs: logs, sub: sub}, nil
}

// WatchMintWithSignature is a free log subscription operation binding the contract event 0x8496c4890288e3b21ccf98329f0f417d546eda7e748a2589fa6cd44eed265a55.
//
// Solidity: event MintWithSignature(address indexed sender, uint256 beginTokenId, uint256 endTokenId, string channel)
func (_UserERC721A *UserERC721AFilterer) WatchMintWithSignature(opts *bind.WatchOpts, sink chan<- *UserERC721AMintWithSignature, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "MintWithSignature", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721AMintWithSignature)
				if err := _UserERC721A.contract.UnpackLog(event, "MintWithSignature", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintWithSignature is a log parse operation binding the contract event 0x8496c4890288e3b21ccf98329f0f417d546eda7e748a2589fa6cd44eed265a55.
//
// Solidity: event MintWithSignature(address indexed sender, uint256 beginTokenId, uint256 endTokenId, string channel)
func (_UserERC721A *UserERC721AFilterer) ParseMintWithSignature(log types.Log) (*UserERC721AMintWithSignature, error) {
	event := new(UserERC721AMintWithSignature)
	if err := _UserERC721A.contract.UnpackLog(event, "MintWithSignature", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721AOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the UserERC721A contract.
type UserERC721AOwnershipTransferredIterator struct {
	Event *UserERC721AOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721AOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721AOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721AOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721AOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721AOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721AOwnershipTransferred represents a OwnershipTransferred event raised by the UserERC721A contract.
type UserERC721AOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserERC721A *UserERC721AFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*UserERC721AOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721AOwnershipTransferredIterator{contract: _UserERC721A.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserERC721A *UserERC721AFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *UserERC721AOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721AOwnershipTransferred)
				if err := _UserERC721A.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UserERC721A *UserERC721AFilterer) ParseOwnershipTransferred(log types.Log) (*UserERC721AOwnershipTransferred, error) {
	event := new(UserERC721AOwnershipTransferred)
	if err := _UserERC721A.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UserERC721ATransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the UserERC721A contract.
type UserERC721ATransferIterator struct {
	Event *UserERC721ATransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UserERC721ATransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UserERC721ATransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UserERC721ATransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UserERC721ATransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UserERC721ATransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UserERC721ATransfer represents a Transfer event raised by the UserERC721A contract.
type UserERC721ATransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_UserERC721A *UserERC721AFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*UserERC721ATransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _UserERC721A.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &UserERC721ATransferIterator{contract: _UserERC721A.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_UserERC721A *UserERC721AFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *UserERC721ATransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _UserERC721A.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UserERC721ATransfer)
				if err := _UserERC721A.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_UserERC721A *UserERC721AFilterer) ParseTransfer(log types.Log) (*UserERC721ATransfer, error) {
	event := new(UserERC721ATransfer)
	if err := _UserERC721A.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
